pipeline {
    agent any
    tools {
        jdk 'jdk17'
        python 'python39'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/AndreNguyen03/simple-search-engine.git'
            }
        }
        stage('Install dependencies') {
            steps {
                dir('backend/search_api') {
                    sh 'pip install -r requirements.txt'
                }
            }
        }
        stage('Run tests') {
            steps {
                dir('backend/search_api') {
                    sh 'python -m unittest discover -s . -p "test_*.py" -v'
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh """
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectKey=search-api \
                        -Dsonar.projectName=search-api \
                        -Dsonar.sources=backend/search_api
                    """
                }
            }
        }
        stage('Quality Gate') {
            steps {
                waitForQualityGate abortPipeline: true
            }
        }
        stage('OWASP Dependency Check') {
            steps {
                dir('backend/search_api') {
                    dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }
        stage('Trivy FS Scan') {
            steps {
                sh 'trivy fs backend/search_api > trivy-search-api-fs.json'
            }
        }
        stage('Docker Build & Push') {
            steps {
                script {
                    def imageTag = "andrenguyen03/search-api:${env.BUILD_NUMBER}"
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh "docker build -t ${imageTag} backend/search_api/"
                        sh "docker push ${imageTag}"
                    }
                    env.IMAGE_TAG = imageTag
                }
            }
        }
        stage('Trivy Image Scan') {
            steps {
                sh "trivy image ${env.IMAGE_TAG} > trivy-search-api-image.json"
            }
        }
        /*
        stage('Deploy to EKS') {
            steps {
                withKubeConfig(credentialsId: 'eks-kubeconfig') {
                    sh """
                      helm upgrade --install search-api ./helm/search-api \
                        --set image.tag=${env.BUILD_NUMBER} \
                        --namespace your-namespace
                    """
                }
            }
        }
        */
    }
}
