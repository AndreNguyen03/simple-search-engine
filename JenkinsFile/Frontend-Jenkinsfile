pipeline {
    agent any
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    tools {
        jdk 'jdk17'
        nodejs 'node24'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/AndreNguyen03/simple-search-engine.git'
            }
        }

        stage('Install dependencies') {
            steps {
                dir('frontend') {
                    sh 'npm install'
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('frontend') {
                    sh 'npm test'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh """
                        NODE_OPTIONS="--max-old-space-size=512" ${SCANNER_HOME}/bin/sonar-scanner \\
                        -Dsonar.projectKey=frontend \\
                        -Dsonar.projectName=frontend \\
                        -Dsonar.projectVersion=1.0 \\
                        -Dsonar.sources=frontend/src \\
                        -Dsonar.exclusions=**/node_modules/**,**/*.test.js,**/*.test.ts,**/*.spec.js,**/*.spec.ts \\
                        -Dsonar.test.inclusions=**/*.test.js,**/*.test.ts,**/*.spec.js,**/*.spec.ts \\
                        -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
                    """
                }
            }
        }

        stage('Quality Gate') {
            steps {
                waitForQualityGate abortPipeline: true
            }
        }

        stage('Security Scan (Trivy)') {
            steps {
                sh 'docker run --rm -v "$(pwd)/frontend:/app" aquasec/trivy fs /app'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    env.FRONTEND_IMAGE = "andrenguyen03/frontend:${env.BUILD_NUMBER}"
                    sh "docker build -t ${env.FRONTEND_IMAGE} frontend/"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withDockerRegistry(credentialsId: 'dockerhub', url: '') {
                    sh "docker push ${env.FRONTEND_IMAGE}"
                }
            }
        }
    }
}
