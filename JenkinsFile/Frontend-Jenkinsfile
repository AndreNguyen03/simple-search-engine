pipeline {
    agent any 
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }
    environment  {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('Init') {
            steps {
                script {
                    // Kiá»ƒm tra náº¿u lÃ  build thá»§ cÃ´ng
                    isManualBuild = currentBuild.getBuildCauses().any { it._class == 'hudson.model.Cause$UserIdCause' }

                    echo "ðŸ“¦ Manual build: ${isManualBuild}"

                    if (!isManualBuild) {
                        // Kiá»ƒm tra thay Ä‘á»•i code náº¿u khÃ´ng pháº£i build thá»§ cÃ´ng
                        def changeLogSets = currentBuild.changeSets
                        def changed = false

                        for (int i = 0; i < changeLogSets.size(); i++) {
                            def entries = changeLogSets[i].items
                            for (int j = 0; j < entries.length; j++) {
                                def entry = entries[j]
                                def files = entry.affectedFiles
                                for (int k = 0; k < files.size(); k++) {
                                    def file = files[k]
                                    if (file.path.startsWith("frontend/")) {
                                        changed = true
                                        break
                                    }
                                }
                                if (changed) break
                            }
                            if (changed) break
                        }

                        if (!changed) {
                            echo "ðŸ›‘ No changes in 'frontend/' â€” stopping pipeline."
                            currentBuild.result = 'NOT_BUILT'
                            error("Nothing to do.")
                        }
                    }
                }
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', credentialsId: 'GITHUB', url: 'https://github.com/AndreNguyen03/simple-search-engine.git'
            }
        }

        stage('Sonarqube Analysis') {
            steps {
                dir('frontend') {
                    withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=frontend \
                        -Dsonar.projectKey=frontend '''
                    }
                }
            }
        }

        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }

        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('frontend') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit --nvdApiKey=b5aece65-76a0-4604-a3e6-b29a27ce13b0', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }

        stage('Trivy File Scan') {
            steps {
                dir('frontend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('frontend') {
                        def imageTag = "andrenguyen03/frontend:${BUILD_NUMBER}"
                        withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                            sh 'docker system prune -f'
                            sh 'docker container prune -f'
                            sh "docker build -t ${imageTag} ."
                            sh "docker push ${imageTag}"
                        }
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                sh 'trivy image andrenguyen03/frontend:${BUILD_NUMBER} > trivyimage.txt'
            }
        }

        stage('Checkout Code Again') {
            steps {
                git branch: 'main', credentialsId: 'GITHUB', url: 'https://github.com/AndreNguyen03/simple-search-engine.git'
            }
        }

        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "simple-search-engine"
                GIT_USER_NAME = "AndreNguyen03"
            }
            steps {
                dir('k8s/frontend') {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            git config user.email "ngocanh030110@example.com"
                            git config user.name "Ngoc Anh Nguyen"
                            imageTag=$(grep -oP '(?<=frontend:)[^ ]+' deployment.yaml)
                            sed -i "s|$andrenguyen03/frontend:${imageTag}|$andrenguyen03/frontend:${BUILD_NUMBER}|" deployment.yaml
                            git add deployment.yaml
                            git commit -m "Update deployment Image to version ${BUILD_NUMBER}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
    }
}
