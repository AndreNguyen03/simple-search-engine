pipeline {
    agent any
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    tools {
        jdk 'jdk17'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/AndreNguyen03/simple-search-engine.git'
            }
        }

        stage('Build & Test backend/crawler_indexer') {
            agent {
                docker { image 'python:3.9' }
            }
            steps {
                dir('backend/crawler_indexer') {
                    sh 'pip install -r requirements.txt'
                    sh 'python -m unittest discover -s . -p "test_*.py" -v'
                }

                withSonarQubeEnv('sonar-server') {
                    sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectKey=crawler-indexer \
                        -Dsonar.projectName=crawler-indexer \
                        -Dsonar.sources=backend/crawler_indexer
                    """
                }

                waitForQualityGate abortPipeline: true

                withCredentials([string(credentialsId: 'nvd-api-key', variable: 'NVD_API_KEY')]) {
                    dir('backend/crawler_indexer') {
                        dependencyCheck additionalArguments: "-o './' -s './' -f 'ALL' --prettyPrint --nvdApiKey=${env.NVD_API_KEY}", odcInstallation: 'DP-Check'
                        dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                    }
                }

                script {
                    def imageTag = "andrenguyen03/crawler-indexer:${env.BUILD_NUMBER}"
                    withDockerRegistry(credentialsId: 'docker', url: '', registry: '', toolName: 'docker') {
                        sh "docker build -t ${imageTag} backend/crawler_indexer/"
                        sh "docker push ${imageTag}"
                    }
                    env.CRAWLER_INDEXER_IMAGE = imageTag
                }
            }
        }

        stage('Build & Test backend/search_api') {
            agent {
                docker { image 'python:3.9' }
            }
            steps {
                dir('backend/search_api') {
                    sh 'pip install -r requirements.txt'
                    sh 'python -m unittest discover -s . -p "test_*.py" -v'
                }

                withSonarQubeEnv('sonar-server') {
                    sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectKey=search-api \
                        -Dsonar.projectName=search-api \
                        -Dsonar.sources=backend/search_api
                    """
                }

                waitForQualityGate abortPipeline: true

                withCredentials([string(credentialsId: 'nvd-api-key', variable: 'NVD_API_KEY')]) {
                    dir('backend/search_api') {
                        dependencyCheck additionalArguments: "--scan ./ --nvdApiKey=${env.NVD_API_KEY}", odcInstallation: 'DP-Check'
                        dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                    }
                }

                script {
                    def imageTag = "andrenguyen03/search-api:${env.BUILD_NUMBER}"
                    withDockerRegistry(credentialsId: 'docker', url: '', registry: '', toolName: 'docker') {
                        sh "docker build -t ${imageTag} backend/search_api/"
                        sh "docker push ${imageTag}"
                    }
                    env.SEARCH_API_IMAGE = imageTag
                }
            }
        }

        stage('Build & Test frontend') {
            agent {
                docker { image 'node:24' }
            }
            steps {
                dir('frontend') {
                    sh 'npm install'
                    sh 'npm test'
                }

                withSonarQubeEnv('sonar-server') {
                    sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectKey=frontend \
                        -Dsonar.projectName=frontend \
                        -Dsonar.sources=frontend
                    """
                }

                waitForQualityGate abortPipeline: true

                withCredentials([string(credentialsId: 'nvd-api-key', variable: 'NVD_API_KEY')]) {
                    dir('frontend') {
                        dependencyCheck additionalArguments: "--scan ./ --disableYarnAudit --disableNodeAudit --nvdApiKey=${env.NVD_API_KEY}", odcInstallation: 'DP-Check'
                        dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                    }
                }

                script {
                    def imageTag = "andrenguyen03/frontend:${env.BUILD_NUMBER}"
                    withDockerRegistry(credentialsId: 'docker', url: '', registry: '', toolName: 'docker') {
                        sh "docker build -t ${imageTag} frontend/"
                        sh "docker push ${imageTag}"
                    }
                    env.FRONTEND_IMAGE = imageTag
                }
            }
        }
    }
}
